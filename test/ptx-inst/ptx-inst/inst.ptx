	.version 2.1
	.target sm_20

	////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	// InstBasic -- this PTX routine tests basic communication between the host and the device.
	// The routine inputs a pointer to a bool.  It loads the pointer, loads 1 into a register, then
	// stores the result (*pointer = 1).  If run incorrectly, which could happen if run on an
	// emulator, means that the host program should stop since it cannot check the results of the rest
	// of the self-checking code below.
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////

	.entry InstBasic (
		.param .u32 __results	// bool*
	)
	{
	.reg .u32 %r<2>;
	// basic load, store.
	ld.param.u32	%r0,[__results];
	mov.u32		%r1, 1;
	st.global.b8	[%r0], %r1;
	exit;
	}

	.entry InstLSMC (
		.param .u32 __results,	// bool*
		.param .u32 __N		// N*
	)
	{
	.reg .u32 %r<5>;

	.reg .u8 %u8_<3>;
	.reg .u16 %u16_<3>;
	.reg .u32 %u32_<4>;
	.reg .u64 %u64_<3>;

	.reg .s8 %s8_<3>;
	.reg .s16 %s16_<3>;
	.reg .s32 %s32_<4>;
	.reg .s64 %s64_<3>;

	.reg .f32 %f32_<3>;
	.reg .f64 %f64_<3>;

	.reg .b16 %b<3>;
	.reg .pred %p<3>;

	.global .u32 __gl_u32[10] = {1,2,3,4,5,6,7,8,9,10};
	.global .u64 __gl2_u32 = 0x0102030405060708;
	.global .u32 __gl3_u32[10] = {31,13,21,12,5,6,7,8,9,10};
	.shared .v4 .u32 %sh_u32;

	// Set up
	ld.param.u32	%r1,[__results];

	// Test LD and MOV equivalence.
	mov.u32		%r2, __results;
	ld.param.u32	%r2, [%r2];		// equivalent to mov/ld equiv to ld, should be zero.
	setp.eq.u32	%p1, %r1, %r2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+0], %b1;

	// Test LD from global area.  The value loaded should be 1.
	// Make sure both forms of indirect, one with "+0" and the other without,
	// work and yield a value = 1.
	ld.global.u32	%u32_1,[__gl_u32];	// load 1 from buffer
	ld.global.u32	%u32_2,[__gl_u32+0];	// load 1 from buffer
	setp.eq.u32	%p1, %u32_1, %u32_2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+1], %b1;
	setp.eq.u32	%p1, %u32_2, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+2], %b1;

	// Test LD from global area, indirect from register.  The value loaded
	// should be 1.
	mov.u32		%u32_2, 0;
	mov.u32		%u32_1, __gl_u32;
	ld.global.u32	%u32_2,[%u32_1];
	setp.eq.u32	%p1, 1, %u32_2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+3], %b1;

	// Test LD from global area, indirect from register plus immediate.  The value loaded
	// should be 2 because we are picking up the second value in __gl_u32.
	mov.u32		%u32_2, 0;
	mov.u32		%u32_1, __gl_u32;
	ld.global.u32	%u32_2,[%u32_1+4];
	setp.eq.u32	%p1, 2, %u32_2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+4], %b1;

	// Test LD from global area, indirect from register, no immediate.
	// This contrasts with the previous test in that the global is not an array of data,
	// but a 64-bit integer.
	mov.u32		%u32_2, 0;
        mov.u32		%u32_1, __gl2_u32;
	ld.global.u32	%u32_2,[%u32_1];
	setp.eq.u32	%p1, 0x05060708, %u32_2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+5], %b1;

	// Test LD from global area, indirect from register, no immediate, and plus immediate.
	// This also tests cvt for conversion of byte to short int.
	// This contrasts with the previous test in that the global is not an array of data,
	// but a 64-bit integer.  In addition, this test works the little endianess of the data.
	// So, the bytes in order are 8, 7, 6, 5, 4, 3, 2, 1.
	mov.u32		%u32_2, 0;
        mov.u32		%u32_1, __gl2_u32;
	ld.global.u8	%u8_1, [%u32_1];
	cvt.u16.u8	%u16_1, %u8_1;
	setp.eq.u16	%p1, 0x0008, %u16_1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.u8	[%r1+6], %b1;
	ld.global.u8	%u8_1, [%u32_1+1];
	cvt.u16.u8	%u16_1, %u8_1;
	setp.eq.u16	%p1, 0x0007, %u16_1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+7], %b1;
	ld.global.u8	%u8_1, [%u32_1+2];
	cvt.u16.u8	%u16_1, %u8_1;
	setp.eq.u16	%p1, 0x0006, %u16_1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+8], %b1;
	ld.global.u8	%u8_1, [%u32_1+3];
	cvt.u16.u8	%u16_1, %u8_1;
	setp.eq.u16	%p1, 0x0005, %u16_1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+9], %b1;

	// Test LD of large fetch.  Using indirect plus immediate, fetch a 32-bit number
	// from global.  Then test the value.
	mov.u32		%u32_2, 0;
	mov.u32		%u32_1, __gl2_u32;
	ld.global.u32	%u32_2,[%u32_1+4];
	setp.eq.u32	%p1, 0x01020304, %u32_2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+10], %b1;

	// LD Vector test.  Store four integers into a global area. Then, load the global as a vector,
	// using indirect register.
	st.shared.u32	[%sh_u32+0], 1;
	st.shared.u32	[%sh_u32+4], 2;
	st.shared.u32	[%sh_u32+8], 3;
	st.shared.u32	[%sh_u32+12], 4;
	mov.u32		%u32_1, __gl_u32;
	ld.global.v4.u32	{%u32_0, %u32_1, %u32_2, %u32_3}, [%u32_1];
	setp.eq.u32	%p1, %u32_0, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+11], %b1;
	setp.eq.u32	%p1, %u32_1, 2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+12], %b1;
	setp.eq.u32	%p1, %u32_2, 3;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+13], %b1;
	setp.eq.u32	%p1, %u32_3, 4;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+14], %b1;
	
	// LD Vector test.  Store four integers into a global area. Then, load the global as a vector,
	// using indirect address with offset.
	st.shared.u32	[%sh_u32+0], 13;
	st.shared.u32	[%sh_u32+4], 31;
	st.shared.u32	[%sh_u32+8], 21;
	st.shared.u32	[%sh_u32+12], 12;
	mov.u32		%u32_1, __gl_u32;
	ld.global.v4.u32	{%u32_0, %u32_1, %u32_2, %u32_3}, [__gl3_u32];
	setp.eq.u32	%p1, %u32_0, 31;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+15], %b1;
	setp.eq.u32	%p1, %u32_1, 13;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+16], %b1;
	setp.eq.u32	%p1, %u32_2, 21;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+17], %b1;
	setp.eq.u32	%p1, %u32_3, 12;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r1+18], %b1;

	// LD instruction size different than operand size.
	// See 8.4.1. Operand Size Exceeding Instruction-Type Size of the PTX documentation.
	// Set whole register to non-zero value.  Store value with ld with 16 bits in lower half,
	// and zeroed out upper half (actually signed extended, but sign is 0).
	mov.u32		%s32_0, 0xcdcdcdcdcd;
	ld.s16		%s32_0, [__gl2_u32+0];
	setp.eq.u32	%p0, %s32_0, 0x0708;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r1+19], %b0;
	mov.u32		%r2, 20;

	// LD instruction size different than operand size.
	mov.u32		%s32_0, 0xcdcdcdcdcd;
	ld.s8		%s32_0, [__gl2_u32+0];
	setp.eq.u32	%p0, %s32_0, 0x00000008;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r1+20], %b0;
	mov.u32		%r2, 21;
	
	// LD instruction size different than operand size.
	mov.u64		%s64_0, 0xcdcdcdcdcdcdcdcd;
	ld.s8		%s64_0, [__gl2_u32+0];
	setp.eq.u64	%p0, %s64_0, 0x0000000000000008;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r1+21], %b0;
	mov.u32		%r2, 22;

	// CVT instruction size different than operand size.
	mov.u16		%s16_0, 0x8000;
	cvt.s32.s16	%s32_0, %s16_0;
	setp.eq.u32	%p0, %s32_0, 0xffff8000;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r1+22], %b0;
	mov.u32		%r2, 23;

	// CVT instruction size different than operand size, and different types.
	mov.u16		%s16_0, 0x8000;
	cvt.s32.u16	%s32_0, %s16_0;
	setp.eq.u32	%p0, %s32_0, 0x00008000;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r1+22], %b0;
	mov.u32		%r2, 23;

	
end:

	// Pass back the number of tests performed.
	ld.param.u32	%r1,[__N];
	st.global.u32	[%r1], %r2;

	exit;
	}

	.entry InstAddSub (
		.param .u32 __results,	// bool*
		.param .u32 __N		// N*
	)
	{
	.reg .u32 %r<5>;

	.reg .u8 %u8_<3>;
	.reg .u16 %u16_<3>;
	.reg .u32 %u32_<4>;
	.reg .u64 %u64_<3>;

	.reg .s8 %s8_<3>;
	.reg .s16 %s16_<3>;
	.reg .s32 %s32_<4>;
	.reg .s64 %s64_<3>;

	.reg .f32 %f32_<5>;
	.reg .f64 %f64_<3>;

	.reg .b16 %b<3>;
	.reg .pred %p<3>;

	.global .u32 __gl_u32[10] = {1,2,3,4,5,6,7,8,9,10};
	.global .u64 __gl2_u32 = 0x0102030405060708;
	.global .u32 __gl3_u32[10] = {31,13,21,12,5,6,7,8,9,10};
	.global .u32 __gl4_u32 = 0xffff0000;
	.global .u32 __gl5_u32 = 0x7ffffff0;
	.global .u32 __gl6_u32 = 0x00000001;
	.global .u32 __gl7_u32 = 4294967295;
	.global .u32 __gl8_u32 = 2;
	.shared .v4 .u32 %sh_u32;


	// Set up
	ld.param.u32	%r0,[__results];

	// ADD - 16 bit, add two positive constants.
	add.u16		%u16_0, 1, 2;
	setp.eq.u16	%p0, %u16_0, 3;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+0], %b0;
	mov.u32		%r2, 1;
	
	// ADD - 16 bit with overflow using two positive contants.
	add.u16		%u16_0, 65535, 1;
	setp.eq.u16	%p0, %u16_0, 0;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+1], %b0;
	mov.u32		%r2, 2;

	// ADD - 16 bit, add a positive constant, and an unsigned register with a positive number.
	mov.s16		%u16_1, 1;
	add.u16		%u16_0, %u16_1, 4;
	setp.eq.u16	%p0, %u16_0, 5;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+2], %b0;
	mov.u32		%r2, 3;

	// ADD - 16 bit, add a positive constant, and a signed register with a positive number.
	mov.s16		%s16_0, 1;
	add.u16		%u16_0, %s16_0, 6;
	setp.eq.u16	%p0, %u16_0, 7;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+3], %b0;
	mov.u32		%r2, 4;

	// ADD - 16 bit, add a positive constant, and a signed register with a negative number.
	// The GPU will interpret the binary as an unsigned number.
	mov.s16		%s16_0, -7;
	add.u16		%u16_0, %s16_0, 6;
	setp.eq.u16	%p0, %u16_0, 65535;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+4], %b0;
	mov.u32		%r2, 5;

	// ADD - 32 bit with overflow/carry out
	add.cc.u32	%u32_1, 4294967295, 2;
	setp.eq.u32	%p1, %u32_1, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+5], %b1;
	mov.u32		%r2, 6;

	// ADDC - 32 bit with carry in
	addc.cc.u32	%u32_2, 0, 0;
	setp.eq.u32	%p1, %u32_2, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+6],%b1;
	mov.u32		%r2, 7;

	// ADD - 32 bit reg/const
	mov.s32		%s32_2, 15;
	add.s32		%s32_1, %s32_2, -20;
	setp.eq.s32	%p1, %s32_1, -5;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+7],%b1;
	mov.u32		%r2, 8;

	// ADD - 32 bit const/reg
	mov.s32		%s32_2, 16;
	add.s32		%s32_1, -20, %s32_2;
	setp.eq.s32	%p1, -4, %s32_1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+8],%b1;
	mov.u32		%r2, 9;

	// ADD - 32 bit reg/reg.  Constant evaluation is also tested a little here.
	mov.s32		%s32_2, 16;
	mov.s32		%s32_3, 4;
	add.s32		%s32_1, %s32_2, %s32_3;
	setp.eq.s32	%p1, 1+2 + 3*2 + 10 +(-4 + 5), %s32_1; // 20.
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+9],%b1;
	mov.u32		%r2, 10;

	// ADD - 32 bit reg/reg, with sat.  Addition that has overflow or underflow
	// is shunted to MAXINT or MININT.
	mov.s32		%s32_2, 2147483645;
	mov.s32		%s32_3, 4;
	add.sat.s32	%s32_1, %s32_2, %s32_3;
	setp.eq.s32	%p1, %s32_1, 2147483647;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+10],%b1;
	mov.u32		%r2, 11;

	// ADD - 32 float.
	mov.f32		%f32_0, 1.0;
	mov.f32		%f32_1, 0.1;
	mov.f32		%f32_2, 1.1;
	add.f32		%f32_3, %f32_0, %f32_1;
	setp.eq.f32	%p0, %f32_2, %f32_3;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+11], %b0;
	mov.u32		%r2, 12;

	// ADD - 32 float, using rz rounding.
	mov.f32		%f32_0, 2.0;
	mov.f32		%f32_1, 0.2;
	mov.f32		%f32_2, 2.2;
	add.rz.f32	%f32_3, %f32_0, %f32_1;
	setp.eq.f32	%p0, %f32_2, %f32_3;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+12], %b0;
	mov.u32		%r2, 13;

	// ADD - 32 float, using rp rounding.
	// First, create a very small number in register %f32_1, 1/2^130.
	mov.f32		%f32_1, 1.0;
	mov.u32		%r3, 130;		// Only go to 130 bin decimal places.
again:
	div.full.f32	%f32_1, %f32_1, 2.0;
	add.u32		%r2, %r2, 1;
	setp.ne.u32	%p0, %r3, %r2;
@%p0	bra		again;
	// Next, add this number to 1, and see if it rounds correctly.
	mov.f32		%f32_0, 1.0;
	add.rp.f32	%f32_3, %f32_0, %f32_1;
	// The numbers should NOT be equal if rounding RP worked.
	setp.eq.f32	%p0, %f32_0, %f32_3;
	selp.b16	%b0, 1, 0, %p0;
	st.global.b8	[%r0+13], %b0;
	mov.u32		%r2, 14;

	// SAD
	mov.u32		%u32_0, 1;
	mov.u32		%u32_1, 2;
	mov.u32		%u32_2, 3;
	sad.u32		%u32_3, %u32_2, %u32_1, %u32_0;	// 3>2 => 1 + 1
	setp.eq.u32	%p1, %u32_3, 2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+14], %b1;
	mov.u32		%r2, 15;

	mov.u32		%u32_0, 1;
	mov.u32		%u32_1, 2;
	mov.u32		%u32_2, 3;
	sad.u32		%u32_3, %u32_1, %u32_2, %u32_0;	// 3<2 => 1 + 1
	setp.eq.u32	%p1, %u32_3, 2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+15], %b1;
	mov.u32		%r2, 16;

	mov.s32		%s32_0, 0;
	mov.s32		%s32_1, -16;
	mov.s32		%s32_2, 15;
	sad.s32		%s32_3, %s32_2, %s32_1, %s32_0;
	setp.eq.s32	%p1, %s32_3, 31;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+16], %b1;
	mov.u32		%r2, 17;

	addc.u16	%s16_1, 0, 0;	// Accepted, not documented.
	addc.u32	%s32_1, 0, 0;
	addc.u64	%s64_1, 0, 0;	// Acepted, not documented.

//	addc.cc.u16	%s16_1, 0, 0;	// Not accepted.
	addc.cc.u32	%s32_1, 0, 0;
//	addc.cc.u64	%s64_1, 0, 0;	// Not accepted.

//	add.cc.u16	%s16_1, 0, 0;	// Not accepted.
	add.cc.u32	%s32_1, 0, 0;
//	add.cc.u64	%s64_1, 0, 0;	// Not accepted.

	subc.u16	%s16_1, 0, 0;	// Accepted, not documented.
	subc.u32	%s32_1, 0, 0;
	subc.u64	%s64_1, 0, 0;	// Accepted, not documented.

//	subc.cc.u16	%s16_1, 0, 0;	// Not accepted.
	subc.cc.u32	%s32_1, 0, 0;
//	subc.cc.u64	%s64_1, 0, 0;	// Not accepted.

//	sub.cc.u16	%s16_1, 0, 0;	// Not accepted.
	sub.cc.u32	%s32_1, 0, 0;
//	sub.cc.u64	%s64_1, 0, 0;	// Not accepted.

	addc.u32	%s32_1, 0, 0;
	mov.s32		%s32_0, 2147483647;
	mov.s32		%s32_1, -16;
	mov.s32		%s32_2, 15;
//	sad.s32		%s32_3, %s32_2, %s32_1, %s32_0;
//	setp.eq.s32	%p1, %s32_3, 0x8000001E;
//	selp.b16	%b1, 1, 0, %p1;
//	st.global.b8	[%r0+17], %b1;
//	mov.u32		%r2, 18;

	addc.u32	%s32_1, 0, 0;
	mov.s32		%s32_2, 1;
	addc.s32	%s32_2, %s32_2, 0;
	setp.eq.s32	%p1, %s32_2, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+17], %b1;
	mov.u32		%r2, 18;

	addc.u32	%s32_1, 0, 0;
	mov.s32		%s32_2, 15;
	addc.s32	%s32_2, %s32_2, 0;
	setp.eq.s32	%p1, %s32_2, 15;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+18], %b1;
	mov.u32		%r2, 19;

	// Test Condition code register preserved in straight line code, with instructions
	// that should not affect it in between the generation and use.  Branching affects CC.
	ld.global.u32	%u32_1, [__gl7_u32];
	ld.global.u32	%u32_2, [__gl8_u32];
	add.cc.u32	%u32_1, %u32_1, %u32_2;
	add.u32		%u32_3, 0, 2;
	st.shared.u32	[%sh_u32], %u32_1;
	ld.shared.u32	%u32_1, [%sh_u32];
	sad.s32		%s32_3, %s32_2, %s32_1, %s32_0;
	addc.u32	%u32_2, 0, 0;
	mad.lo.u32	%u32_2, %u32_1, %u32_3, %u32_2;
	clz.b32		%u32_2, %u32_1;
	addc.cc.u32	%u32_2, 0, 0;
	setp.eq.u32	%p1, %u32_2, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+19],%b1;
	mov.u32		%r2, 20;

	// BFIND
	ld.global.u32	%u32_1, [__gl4_u32];
	bfind.u32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 31;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+20],%b1;
	mov.u32		%r2, 21;
	
	ld.global.u32	%u32_1, [__gl5_u32];
	bfind.u32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 30;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+21],%b1;
	mov.u32		%r2, 22;
	
	ld.global.u32	%u32_1, [__gl6_u32];
	bfind.u32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 0;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+22],%b1;
	mov.u32		%r2, 23;
	
	ld.global.u32	%u32_1, [__gl4_u32];
	bfind.s32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 15;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+23],%b1;
	mov.u32		%r2, 24;
	
	ld.global.u32	%u32_1, [__gl5_u32];
	bfind.s32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 30;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+24],%b1;
	mov.u32		%r2, 25;
	
	ld.global.u32	%u32_1, [__gl6_u32];
	bfind.s32	%u32_1, %u32_1;
	setp.eq.u32	%p1, %u32_1, 0;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+25],%b1;
	mov.u32		%r2, 26;
	
	// ATOM addition.
	// 32 bits.
	atom.global.add.u32	%u32_1, [__gl8_u32], 1;
	setp.eq.u32	%p1, %u32_1, 2;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+26], %b1;
	mov.u32		%r2, 27;
	ld.global.u32	%u32_1, [__gl8_u32];
	setp.eq.u32	%p1, %u32_1, 3;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+27], %b1;
	mov.u32		%r2, 28;

bra end;

	// SUB - 16 bit (negative, unsigned!)
	add.u16		%u16_1, 0, 0;		// First, clear carry.
	sub.u16		%u16_1, 1, 2;		// should not set carry
	setp.eq.u16	%p1, %u16_1, -1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+10],%b1;
	
	// test result is also the same as 0xffff.
	setp.eq.u16	%p1, %u16_1, 0xffff;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+11],%b1;

	// test carry out
	add.u16		%u16_1, 1, 0;
	setp.eq.u16	%p1, %u16_1, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+12],%b1;

end:

	// Pass back the number of tests performed.
	ld.param.u32	%r1,[__N];
	st.global.u32	[%r1], %r2;

	exit;
	}

	.entry Test (
		.param .u32 __results,	// Float*
		.param .u32 __N		// N*
	)
	{
	.reg .u32 %r<5>;

	.reg .u8 %u8_<3>;
	.reg .u16 %u16_<3>;
	.reg .u32 %u32_<4>;
	.reg .u64 %u64_<3>;

	.reg .s8 %s8_<3>;
	.reg .s16 %s16_<3>;
	.reg .s32 %s32_<4>;
	.reg .s64 %s64_<3>;

	.reg .f32 %f32_<5>;
	.reg .f64 %f64_<3>;

	.reg .b16 %b<3>;
	.reg .pred %p<3>;

	.global .u32 __gl_u32[10] = {1,2,3,4,5,6,7,8,9,10};
	.global .u64 __gl2_u32 = 0x0102030405060708;
	.global .u32 __gl3_u32[10] = {31,13,21,12,5,6,7,8,9,10};
	.shared .v4 .u32 %sh_u32;

	// Set up
	ld.param.u32	%r0,[__results];
	mov.u32		%r2, 0;
	mov.f32		%f32_1, 1.0;

again:
	// ADD - 32 float.
	mov.f32		%f32_0, 1.0;
	div.full.f32	%f32_1, %f32_1, 2.0;
	add.rp.f32	%f32_3, %f32_0, %f32_1;
	st.global.f32	[%r0], %f32_3;
	add.u32		%r2, %r2, 1;
	add.u32		%r0, %r0, 4;
	setp.ne.u32	%p1, %r2, 40;

	// compare
	setp.ne.f32	%p2, %f32_3, %f32_0;
@%p2	bra		again;

end:

	// Pass back the number of tests performed.
	ld.param.u32	%r1,[__N];
	st.global.u32	[%r1], %r2;

	exit;
	}


	.entry Test2 (
		.param .u32 __results,
		.param .u32 __N		// N*
	)
	{
	.reg .u32 %r<5>;

	.reg .u8 %u8_<3>;
	.reg .u16 %u16_<3>;
	.reg .u32 %u32_<4>;
	.reg .u64 %u64_<3>;

	.reg .s8 %s8_<3>;
	.reg .s16 %s16_<3>;
	.reg .s32 %s32_<4>;
	.reg .s64 %s64_<3>;

	.reg .f32 %f32_<5>;
	.reg .f64 %f64_<3>;

	.reg .b16 %b<3>;
	.reg .pred %p<3>;

	.global .u32 __gl_u32[10] = {1,2,3,4,5,6,7,8,9,10};
	.global .u64 __gl2_u32 = 0x0102030405060708;
	.global .u32 __gl3_u32[10] = {31,13,21,12,5,6,7,8,9,10};
	.shared .v4 .u32 %sh_u32;

	// Set up
	ld.param.u32	%r0,[__results];

	ld.param.s32	%s32_1, [__results];
	add.cc.u32	%s32_1, %s32_1, %s32_1;
	ld.param.s16	%s16_1, [__results];
	addc.u16	%s16_1, %s16_1, %s16_1;	// Accepted, not documented.
	setp.eq.u16	%p1, %u16_1, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+0],%b1;
	mov.u32		%r2, 1;

	ld.param.s32	%s32_1, [__results];
	add.cc.u32	%s32_1, %s32_1, %s32_1;
	addc.u32	%s32_1, %s32_1, %s32_1;	// Accepted, not documented.
	setp.eq.u16	%p1, %u16_1, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+1],%b1;
	mov.u32		%r2, 2;

	ld.param.s32	%s32_1, [__results];
	add.cc.u32	%s32_1, %s32_1, %s32_1;
	ld.param.s64	%s64_1, [__results];
	addc.u64	%s64_1, 0, 0;	// Acepted, not documented.
	setp.eq.u16	%p1, %u16_1, 1;
	selp.b16	%b1, 1, 0, %p1;
	st.global.b8	[%r0+2],%b1;
	mov.u32		%r2, 3;


//	add.cc.u16	%s16_1, 0, 0;	// Not accepted.
	add.cc.u32	%s32_1, 0, 0;
//	add.cc.u64	%s64_1, 0, 0;	// Not accepted.

	subc.u16	%s16_1, 0, 0;	// Accepted, not documented.
	subc.u32	%s32_1, 0, 0;
	subc.u64	%s64_1, 0, 0;	// Accepted, not documented.

//	sub.cc.u16	%s16_1, 0, 0;	// Not accepted.
	sub.cc.u32	%s32_1, 0, 0;
//	sub.cc.u64	%s64_1, 0, 0;	// Not accepted.

end:
	// Pass back the number of tests performed.
	ld.param.u32	%r1,[__N];
	st.global.u32	[%r1], %r2;

	exit;
	}
